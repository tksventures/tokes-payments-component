/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Order, Payment } from "./types";
export namespace Components {
    interface CurrencyButton {
        "currency": string;
        "isSelected": boolean;
        "selectCurrency": (currency: string) => void;
    }
    interface CurrencyModal {
        "apiKey": string;
        "orderData": Order;
        "referenceId": string;
        "registerOrder": () => void;
        "selectCurrency": (currency: string) => void;
        "url": string;
    }
    interface ModalBanner {
        "active": boolean;
        "metaStyle": string;
    }
    interface ModalButton {
        "action": () => void;
        "metaStyle": string;
    }
    interface PaidModal {
        "apiKey": string;
        "orderData": Order;
        "paymentData": Payment;
        "referenceId": string;
        "statusMessage": string;
        "url": string;
    }
    interface PaymentPortal {
        /**
          * API Key for merchant
         */
        "apiKey": string;
        /**
          * Close payment portal
         */
        "closeModal": () => void;
        /**
          * Order ID for previously setup order
         */
        "referenceId": string;
        /**
          * URL to lookup payment data
         */
        "url": string;
        /**
          * Total price in USD for order
         */
        "usd": number;
    }
    interface TokesModal {
        "active": boolean;
        "metaStyle": string;
    }
    interface TokesPayments {
        /**
          * API Key for merchant
         */
        "apiKey": string;
        /**
          * Button disabled parameter
         */
        "disabled": boolean;
        /**
          * Reference ID for order
         */
        "referenceId": string;
        /**
          * URL to lookup payment data
         */
        "url": string;
        /**
          * Total price in USD for order
         */
        "usd": number;
    }
    interface UnpaidModal {
        "apiKey": string;
        "orderData": Order;
        "paymentData": Payment;
        "referenceId": string;
        "url": string;
    }
}
declare global {
    interface HTMLCurrencyButtonElement extends Components.CurrencyButton, HTMLStencilElement {
    }
    var HTMLCurrencyButtonElement: {
        prototype: HTMLCurrencyButtonElement;
        new (): HTMLCurrencyButtonElement;
    };
    interface HTMLCurrencyModalElement extends Components.CurrencyModal, HTMLStencilElement {
    }
    var HTMLCurrencyModalElement: {
        prototype: HTMLCurrencyModalElement;
        new (): HTMLCurrencyModalElement;
    };
    interface HTMLModalBannerElement extends Components.ModalBanner, HTMLStencilElement {
    }
    var HTMLModalBannerElement: {
        prototype: HTMLModalBannerElement;
        new (): HTMLModalBannerElement;
    };
    interface HTMLModalButtonElement extends Components.ModalButton, HTMLStencilElement {
    }
    var HTMLModalButtonElement: {
        prototype: HTMLModalButtonElement;
        new (): HTMLModalButtonElement;
    };
    interface HTMLPaidModalElement extends Components.PaidModal, HTMLStencilElement {
    }
    var HTMLPaidModalElement: {
        prototype: HTMLPaidModalElement;
        new (): HTMLPaidModalElement;
    };
    interface HTMLPaymentPortalElement extends Components.PaymentPortal, HTMLStencilElement {
    }
    var HTMLPaymentPortalElement: {
        prototype: HTMLPaymentPortalElement;
        new (): HTMLPaymentPortalElement;
    };
    interface HTMLTokesModalElement extends Components.TokesModal, HTMLStencilElement {
    }
    var HTMLTokesModalElement: {
        prototype: HTMLTokesModalElement;
        new (): HTMLTokesModalElement;
    };
    interface HTMLTokesPaymentsElement extends Components.TokesPayments, HTMLStencilElement {
    }
    var HTMLTokesPaymentsElement: {
        prototype: HTMLTokesPaymentsElement;
        new (): HTMLTokesPaymentsElement;
    };
    interface HTMLUnpaidModalElement extends Components.UnpaidModal, HTMLStencilElement {
    }
    var HTMLUnpaidModalElement: {
        prototype: HTMLUnpaidModalElement;
        new (): HTMLUnpaidModalElement;
    };
    interface HTMLElementTagNameMap {
        "currency-button": HTMLCurrencyButtonElement;
        "currency-modal": HTMLCurrencyModalElement;
        "modal-banner": HTMLModalBannerElement;
        "modal-button": HTMLModalButtonElement;
        "paid-modal": HTMLPaidModalElement;
        "payment-portal": HTMLPaymentPortalElement;
        "tokes-modal": HTMLTokesModalElement;
        "tokes-payments": HTMLTokesPaymentsElement;
        "unpaid-modal": HTMLUnpaidModalElement;
    }
}
declare namespace LocalJSX {
    interface CurrencyButton {
        "currency"?: string;
        "isSelected"?: boolean;
        "selectCurrency"?: (currency: string) => void;
    }
    interface CurrencyModal {
        "apiKey"?: string;
        "onExit"?: (event: CustomEvent<any>) => void;
        "orderData"?: Order;
        "referenceId"?: string;
        "registerOrder"?: () => void;
        "selectCurrency"?: (currency: string) => void;
        "url"?: string;
    }
    interface ModalBanner {
        "active"?: boolean;
        "metaStyle"?: string;
    }
    interface ModalButton {
        "action"?: () => void;
        "metaStyle"?: string;
    }
    interface PaidModal {
        "apiKey"?: string;
        "onExit"?: (event: CustomEvent<any>) => void;
        "onNavigate"?: (event: CustomEvent<any>) => void;
        "orderData"?: Order;
        "paymentData"?: Payment;
        "referenceId"?: string;
        "statusMessage"?: string;
        "url"?: string;
    }
    interface PaymentPortal {
        /**
          * API Key for merchant
         */
        "apiKey"?: string;
        /**
          * Close payment portal
         */
        "closeModal"?: () => void;
        /**
          * Order ID for previously setup order
         */
        "referenceId"?: string;
        /**
          * URL to lookup payment data
         */
        "url"?: string;
        /**
          * Total price in USD for order
         */
        "usd"?: number;
    }
    interface TokesModal {
        "active"?: boolean;
        "metaStyle"?: string;
    }
    interface TokesPayments {
        /**
          * API Key for merchant
         */
        "apiKey"?: string;
        /**
          * Button disabled parameter
         */
        "disabled"?: boolean;
        /**
          * Reference ID for order
         */
        "referenceId"?: string;
        /**
          * URL to lookup payment data
         */
        "url"?: string;
        /**
          * Total price in USD for order
         */
        "usd"?: number;
    }
    interface UnpaidModal {
        "apiKey"?: string;
        "onExit"?: (event: CustomEvent<any>) => void;
        "onNavigate"?: (event: CustomEvent<any>) => void;
        "orderData"?: Order;
        "paymentData"?: Payment;
        "referenceId"?: string;
        "url"?: string;
    }
    interface IntrinsicElements {
        "currency-button": CurrencyButton;
        "currency-modal": CurrencyModal;
        "modal-banner": ModalBanner;
        "modal-button": ModalButton;
        "paid-modal": PaidModal;
        "payment-portal": PaymentPortal;
        "tokes-modal": TokesModal;
        "tokes-payments": TokesPayments;
        "unpaid-modal": UnpaidModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "currency-button": LocalJSX.CurrencyButton & JSXBase.HTMLAttributes<HTMLCurrencyButtonElement>;
            "currency-modal": LocalJSX.CurrencyModal & JSXBase.HTMLAttributes<HTMLCurrencyModalElement>;
            "modal-banner": LocalJSX.ModalBanner & JSXBase.HTMLAttributes<HTMLModalBannerElement>;
            "modal-button": LocalJSX.ModalButton & JSXBase.HTMLAttributes<HTMLModalButtonElement>;
            "paid-modal": LocalJSX.PaidModal & JSXBase.HTMLAttributes<HTMLPaidModalElement>;
            "payment-portal": LocalJSX.PaymentPortal & JSXBase.HTMLAttributes<HTMLPaymentPortalElement>;
            "tokes-modal": LocalJSX.TokesModal & JSXBase.HTMLAttributes<HTMLTokesModalElement>;
            "tokes-payments": LocalJSX.TokesPayments & JSXBase.HTMLAttributes<HTMLTokesPaymentsElement>;
            "unpaid-modal": LocalJSX.UnpaidModal & JSXBase.HTMLAttributes<HTMLUnpaidModalElement>;
        }
    }
}
