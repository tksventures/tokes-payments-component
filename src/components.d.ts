/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/state-tunnel';
import {
  Order,
  Payment,
} from './types';


export namespace Components {

  interface CurrencyButton {
    'currency': string;
    'isSelected': boolean;
    'onSelect': (currency: string) => void;
  }
  interface CurrencyButtonAttributes extends StencilHTMLAttributes {
    'currency'?: string;
    'isSelected'?: boolean;
    'onSelect'?: (currency: string) => void;
  }

  interface CurrencyModal {
    'apiKey': string;
    'orderData': Order;
    'referenceId': string;
    'registerOrder': () => void;
    'selectCurrency': (currency: string) => void;
    'url': string;
  }
  interface CurrencyModalAttributes extends StencilHTMLAttributes {
    'apiKey'?: string;
    'onExit'?: (event: CustomEvent) => void;
    'orderData'?: Order;
    'referenceId'?: string;
    'registerOrder'?: () => void;
    'selectCurrency'?: (currency: string) => void;
    'url'?: string;
  }

  interface PaidModal {
    'apiKey': string;
    'orderData': Order;
    'paymentData': Payment;
    'referenceId': string;
    'statusMessage': string;
    'url': string;
  }
  interface PaidModalAttributes extends StencilHTMLAttributes {
    'apiKey'?: string;
    'onExit'?: (event: CustomEvent) => void;
    'onNavigate'?: (event: CustomEvent) => void;
    'orderData'?: Order;
    'paymentData'?: Payment;
    'referenceId'?: string;
    'statusMessage'?: string;
    'url'?: string;
  }

  interface PaymentPortal {
    /**
    * API Key for merchant
    */
    'apiKey': string;
    /**
    * Close payment portal
    */
    'closeModal': () => void;
    /**
    * Order ID for previously setup order
    */
    'referenceId': string;
    /**
    * URL to lookup payment data
    */
    'url': string;
    /**
    * Total price in USD for order
    */
    'usd': number;
  }
  interface PaymentPortalAttributes extends StencilHTMLAttributes {
    /**
    * API Key for merchant
    */
    'apiKey'?: string;
    /**
    * Close payment portal
    */
    'closeModal'?: () => void;
    /**
    * Order ID for previously setup order
    */
    'referenceId'?: string;
    /**
    * URL to lookup payment data
    */
    'url'?: string;
    /**
    * Total price in USD for order
    */
    'usd'?: number;
  }

  interface ModalBanner {
    'active': boolean;
    'metaStyle': string;
  }
  interface ModalBannerAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
    'metaStyle'?: string;
  }

  interface ModalButton {
    'action': () => void;
    'metaStyle': string;
  }
  interface ModalButtonAttributes extends StencilHTMLAttributes {
    'action'?: () => void;
    'metaStyle'?: string;
  }

  interface TokesModal {
    'active': boolean;
    'metaStyle': string;
  }
  interface TokesModalAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
    'metaStyle'?: string;
  }

  interface TokesPayments {
    /**
    * API Key for merchant
    */
    'apiKey': string;
    /**
    * Reference ID for order
    */
    'referenceId': string;
    /**
    * URL to lookup payment data
    */
    'url': string;
    /**
    * Total price in USD for order
    */
    'usd': number;
  }
  interface TokesPaymentsAttributes extends StencilHTMLAttributes {
    /**
    * API Key for merchant
    */
    'apiKey'?: string;
    /**
    * Reference ID for order
    */
    'referenceId'?: string;
    /**
    * URL to lookup payment data
    */
    'url'?: string;
    /**
    * Total price in USD for order
    */
    'usd'?: number;
  }

  interface UnpaidModal {
    'apiKey': string;
    'orderData': Order;
    'paymentData': Payment;
    'referenceId': string;
    'url': string;
  }
  interface UnpaidModalAttributes extends StencilHTMLAttributes {
    'apiKey'?: string;
    'onExit'?: (event: CustomEvent) => void;
    'onNavigate'?: (event: CustomEvent) => void;
    'orderData'?: Order;
    'paymentData'?: Payment;
    'referenceId'?: string;
    'url'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CurrencyButton': Components.CurrencyButton;
    'CurrencyModal': Components.CurrencyModal;
    'PaidModal': Components.PaidModal;
    'PaymentPortal': Components.PaymentPortal;
    'ModalBanner': Components.ModalBanner;
    'ModalButton': Components.ModalButton;
    'TokesModal': Components.TokesModal;
    'TokesPayments': Components.TokesPayments;
    'UnpaidModal': Components.UnpaidModal;
  }

  interface StencilIntrinsicElements {
    'currency-button': Components.CurrencyButtonAttributes;
    'currency-modal': Components.CurrencyModalAttributes;
    'paid-modal': Components.PaidModalAttributes;
    'payment-portal': Components.PaymentPortalAttributes;
    'modal-banner': Components.ModalBannerAttributes;
    'modal-button': Components.ModalButtonAttributes;
    'tokes-modal': Components.TokesModalAttributes;
    'tokes-payments': Components.TokesPaymentsAttributes;
    'unpaid-modal': Components.UnpaidModalAttributes;
  }


  interface HTMLCurrencyButtonElement extends Components.CurrencyButton, HTMLStencilElement {}
  var HTMLCurrencyButtonElement: {
    prototype: HTMLCurrencyButtonElement;
    new (): HTMLCurrencyButtonElement;
  };

  interface HTMLCurrencyModalElement extends Components.CurrencyModal, HTMLStencilElement {}
  var HTMLCurrencyModalElement: {
    prototype: HTMLCurrencyModalElement;
    new (): HTMLCurrencyModalElement;
  };

  interface HTMLPaidModalElement extends Components.PaidModal, HTMLStencilElement {}
  var HTMLPaidModalElement: {
    prototype: HTMLPaidModalElement;
    new (): HTMLPaidModalElement;
  };

  interface HTMLPaymentPortalElement extends Components.PaymentPortal, HTMLStencilElement {}
  var HTMLPaymentPortalElement: {
    prototype: HTMLPaymentPortalElement;
    new (): HTMLPaymentPortalElement;
  };

  interface HTMLModalBannerElement extends Components.ModalBanner, HTMLStencilElement {}
  var HTMLModalBannerElement: {
    prototype: HTMLModalBannerElement;
    new (): HTMLModalBannerElement;
  };

  interface HTMLModalButtonElement extends Components.ModalButton, HTMLStencilElement {}
  var HTMLModalButtonElement: {
    prototype: HTMLModalButtonElement;
    new (): HTMLModalButtonElement;
  };

  interface HTMLTokesModalElement extends Components.TokesModal, HTMLStencilElement {}
  var HTMLTokesModalElement: {
    prototype: HTMLTokesModalElement;
    new (): HTMLTokesModalElement;
  };

  interface HTMLTokesPaymentsElement extends Components.TokesPayments, HTMLStencilElement {}
  var HTMLTokesPaymentsElement: {
    prototype: HTMLTokesPaymentsElement;
    new (): HTMLTokesPaymentsElement;
  };

  interface HTMLUnpaidModalElement extends Components.UnpaidModal, HTMLStencilElement {}
  var HTMLUnpaidModalElement: {
    prototype: HTMLUnpaidModalElement;
    new (): HTMLUnpaidModalElement;
  };

  interface HTMLElementTagNameMap {
    'currency-button': HTMLCurrencyButtonElement
    'currency-modal': HTMLCurrencyModalElement
    'paid-modal': HTMLPaidModalElement
    'payment-portal': HTMLPaymentPortalElement
    'modal-banner': HTMLModalBannerElement
    'modal-button': HTMLModalButtonElement
    'tokes-modal': HTMLTokesModalElement
    'tokes-payments': HTMLTokesPaymentsElement
    'unpaid-modal': HTMLUnpaidModalElement
  }

  interface ElementTagNameMap {
    'currency-button': HTMLCurrencyButtonElement;
    'currency-modal': HTMLCurrencyModalElement;
    'paid-modal': HTMLPaidModalElement;
    'payment-portal': HTMLPaymentPortalElement;
    'modal-banner': HTMLModalBannerElement;
    'modal-button': HTMLModalButtonElement;
    'tokes-modal': HTMLTokesModalElement;
    'tokes-payments': HTMLTokesPaymentsElement;
    'unpaid-modal': HTMLUnpaidModalElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
